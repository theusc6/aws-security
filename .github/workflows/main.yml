name: Terraform CI

on:
  pull_request:
    paths:
      - '**.tf'
    branches:
      - main
  push:
    paths:
      - '**.tf'
    branches:
      - main

permissions:
  id-token: write # This is required for aws oidc connection
  contents: write # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
  actions: write
  issues: write

env:
  AWS_ROLE_TO_ASSUME: ${{ secrets.DEPLOY_ROLE }}
  AWS_REGION: "us-west-2"
  SECRET_KEY: ${{ secrets.GITHUB_TOKEN }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          terraform init -backend-config="key=${{ github.ref }}/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -out=plan.tfplan > plan_output.txt

      - name: Check for Plan Errors
        run: |
          if grep -q "Error:" plan_output.txt; then
            echo "Terraform plan failed. See the PR comments or the above logs for details."
            exit 1
          fi

      - name: Comment PR with Plan Result
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        with:
          script: |
            var fs = require('fs');
            var output = fs.readFileSync('plan_output.txt', 'utf8');
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
        env:  # Pass GH_TOKEN to this step for the GitHub Script
          GH_TOKEN: ${{ env.SECRET_KEY }}

  checkov-scan:
    name: Checkov Security Scan
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          
      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: checkov -d .

  apply:
    name: Apply Terraform
    needs: checkov-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && github.event.inputs.confirmApply == 'yes'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-session
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Apply
        run: |
          set +e  # This allows the script to continue even after errors
          terraform apply -auto-approve > apply_output.txt
          if grep -q "Error:" apply_output.txt; then
            echo "Terraform apply failed. Check the logs for details."
            exit 1
          fi


name: Terraform CI

on:
  pull_request:
    paths:
      - '**.tf'
    branches:
      - main
  push:
    tags:
      - 'dev-*'
      - 'staging-*'
      - 'prod-*'
    paths:
      - '**.tf'

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  issues: write

env:
  AWS_ROLE_TO_ASSUME: ${{ secrets.DEPLOY_ROLE }}
  AWS_REGION: "us-west-2"
  SECRET_KEY: ${{ secrets.GITHUB_TOKEN }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      # Add Terraform Format Step
      - name: Terraform Format
        run: terraform fmt -check

      - name: Determine Environment from Branch or Tag
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV # Default environment for pull requests
          else
            echo "ENVIRONMENT=$(echo ${{ github.ref }} | sed -e 's,refs/tags/,,g' | cut -d'-' -f1)" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: |
          cd environments/${ENVIRONMENT}
          terraform init -backend-config="key=${ENVIRONMENT}/terraform.tfstate"

      - name: Terraform Validate
        run: |
          cd environments/${ENVIRONMENT}
          terraform validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          cd environments/${ENVIRONMENT}
          terraform plan -out=plan.tfplan > plan_output.txt

          
      - name: Check for Plan Errors
        run: |
          if grep -q "Error:" plan_output.txt; then
            echo "Terraform plan failed. Check the logs for details."
            exit 1
          fi

      - name: Comment PR with Plan Result
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6.4.1
        with:
          script: |
            var fs = require('fs');
            var output = fs.readFileSync('plan_output.txt', 'utf8');
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
        env:
          GH_TOKEN: ${{ env.SECRET_KEY }}

  checkov-scan:
    name: Checkov Security Scan
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: |
          checkov -d . --download-external-modules true --skip-check CKV_TF_1

  tflint-check:
    name: TFLint Check
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.34.0/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/

      - name: Run TFLint
        run: tflint
        
  apply:
    name: Apply Terraform
    needs: [checkov-scan, tflint-check]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/staging-') || startsWith(github.ref, 'refs/tags/prod-')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0
        with:
          token: ${{ env.SECRET_KEY }}

      - name: Determine Environment from Branch or Tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=$(echo ${{ github.ref }} | sed -e 's,refs/tags/,,g' | cut -d'-' -f1)" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials from OIDC
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Terraform Apply
        run: |
          set +e
          ENVIRONMENT=$(echo ${{ github.ref }} | sed -e 's,refs/tags/,,g' | cut -d'-' -f1)
          cd environments/$ENVIRONMENT
          terraform apply -auto-approve > apply_output.txt
          if grep -q "Error:" apply_output.txt; then
            echo "Terraform apply failed. Check the logs for details."
            exit 1
          fi


